/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.JPSistemas.SistemaFuncionario.apresentacao;

import br.JPSistemas.SistemaFuncionario.entidade.Funcionario;
import br.JPSistemas.SistemaFuncionario.entidade.Gerente;
import br.JPSistemas.SistemaFuncionario.negocio.FuncionarioBO;
import br.JPSistemas.SistemaFuncionario.negocio.GerenteBO;
import br.JPSistemas.SistemaFuncionario.negocio.ListaFuncionariosVaziaException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author JOSIMAR
 */
public class TelaConsultaGerente extends javax.swing.JPanel implements AbaSelecionada {

    List<Gerente> gerentes;
    TelaInicial inicial;
    TelaAlterarFuncionario telaAlterarFuncionario;
    /**
     * Creates new form TelaRelatorioFuncionarioFuncionario
     */
    public TelaConsultaGerente(TelaInicial telaInicial) {
        initComponents();
        gerentes = new ArrayList<Gerente>();
        this.inicial=telaInicial;
    }

    @Override
    public void OnAbaSelecionada() {
        exibirDadosTabela();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblGerentes = new javax.swing.JTable();
        btnAlterar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();

        tblGerentes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nome", "CPF", "Salario", "Data de Nascimento", "Departamento"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblGerentes);

        btnAlterar.setText("Alterar");
        btnAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarActionPerformed(evt);
            }
        });

        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnAlterar)
                .addGap(18, 18, 18)
                .addComponent(btnExcluir)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAlterar)
                    .addComponent(btnExcluir))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        try {
            int linhaSelecionada = this.tblGerentes.getSelectedRow();
            Funcionario funcionario = this.gerentes.get(linhaSelecionada);
            String mensagem = "Deseja Excluir Funcionario " + funcionario.getNome() + "?";
            String titulo = "Excluir Funcionario";
            int resultado = JOptionPane.showConfirmDialog(this, mensagem, titulo, JOptionPane.YES_NO_OPTION);
            if (resultado == JOptionPane.YES_OPTION) {
                FuncionarioBO funcionarioBO = new FuncionarioBO();
                funcionarioBO.excluir(funcionario);
                titulo = "Excluir Funcionário";
                mensagem = "Funcionario Excluido com Sucesso!";
                JOptionPane.showMessageDialog(this, mensagem, titulo, JOptionPane.INFORMATION_MESSAGE);
                exibirDadosTabela();
            }
        } catch (Exception ex) {
            String titulo = "Excluir Funcionário!";
            String mensagem = "Ocorreu um erro inesperado, Favor entra em contato com o administrador";
            JOptionPane.showMessageDialog(this, mensagem, titulo, JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(TelaConsultaGerente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarActionPerformed
        int linhaSelecionada = this.tblGerentes.getSelectedRow();
        Funcionario funcionario = this.gerentes.get(linhaSelecionada);
        telaAlterarFuncionario = new TelaAlterarFuncionario(funcionario,inicial);
        inicial.adicionarTab("Alterar Funcionario", telaAlterarFuncionario);
       
    }//GEN-LAST:event_btnAlterarActionPerformed

    private void exibirDadosTabela() {
        try {
            this.carregarListaDepartamento();
            ModeloDadosFuncionarios modeloDadosFuncionarios = new ModeloDadosFuncionarios();
            this.tblGerentes.setModel(modeloDadosFuncionarios);
            btnAlterar.setEnabled(true);
            btnExcluir.setEnabled(true);
        } catch (ListaFuncionariosVaziaException ex) {
            btnExcluir.setEnabled(false);
            btnAlterar.setEnabled(false);
            String titulo = "Lista de Funcionarios";
            String mensagem = "Lista de Funcionarios Vazia!";
            JOptionPane.showMessageDialog(this, mensagem, titulo, JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(TelaConsultaGerente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            String titulo = "Erro ao Carregar Lista de Funcionarios!";
            String mensagem = "Ocorreu um erro inesperado, Favor entra em contato com o administrador";
            JOptionPane.showMessageDialog(this, mensagem, titulo, JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(TelaConsultaGerente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void carregarListaDepartamento() throws Exception {
        GerenteBO gerenteBO = new GerenteBO();
        gerentes = gerenteBO.buscarTodos();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlterar;
    public javax.swing.JButton btnExcluir;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblGerentes;
    // End of variables declaration//GEN-END:variables
class ModeloDadosFuncionarios extends AbstractTableModel {

        @Override
        public String getColumnName(int coluna) {
            if (coluna == 0) {
                return "ID";
            } else if (coluna == 1) {
                return "Nome";
            } else if (coluna == 2) {
                return "CPF";
            } else if (coluna == 3) {
                return "Salário";
            } else if (coluna == 4) {
                return "Data Nascimento";
            } else {
                return "Departamento";
            }
        }
        @Override
        public int getRowCount() {
            return gerentes.size();
        }

        @Override
        public int getColumnCount() {
            return 7;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Funcionario funcionario = gerentes.get(rowIndex);
            if (columnIndex == 0) {
                return funcionario.getId();
            } else if (columnIndex == 1) {
                return funcionario.getNome();
            } else if (columnIndex == 2) {
                return funcionario.getCpf();
            } else if (columnIndex == 3) {
                DecimalFormat formatador = new DecimalFormat("#,##0.00");
                return formatador.format(funcionario.getSalario());
            } else if (columnIndex == 4) {
                String formato = "dd/MM/yyyy";
                String date = new SimpleDateFormat(formato).format(funcionario.getDataNascimento());
                return date;
            } else {
                return funcionario.getCargo().getDepartamento().getArea();
            }
        }

    }

}
